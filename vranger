#!/usr/bin/env bash

# Allow vranger to run inside a tmux instance.
# This allows us to run a nested tmux instance.
unset TMUX

# Default mapping to detach tmux is <Leader>q.
# The user can override by setting VRANGER_DETACH.
if [ -z "$VRANGER_DETACH" ]; then
  export VRANGER_DETACH="<Leader>q"
fi

# Check if VIM is compiled with client-server support
if ! vim --version | fgrep -q -- '+clientserver'; then
  # it isn't, use the send-keys hack
  export VRANGER_SENDKEYS=1
elif vim --version | fgrep -q -- 'MacVim GUI'; then
  # Only the GUI version (mvim) can act as a server, use the hack
  export VRANGER_SENDKEYS=1
fi

export VRANGER_ID="vrim_$(date +%s)"

if [ ! -x "$(which ranger)" ]; then
    echo "ranger could not be found." >&2
    exit 1
fi

# Start ranger
EDITOR="$(cd $(dirname $0) && pwd)/vrim" ranger

# Ranger is now finished, and we need to do some cleanup.

if tmux has-session -t $VRANGER_ID >/dev/null 2>&1; then
  VRANGER_HAS_TMUX_SESSION=1
fi

_send_vim() {
  if [ "$VRANGER_HAS_TMUX_SESSION" != "1" ]; then
    return
  fi

  if [ "$VRANGER_SENDKEYS" = "1" ]; then
    tmux send-keys -t $VRANGER_ID Escape
    tmux send-keys -t $VRANGER_ID -l "$1"
    tmux send-keys -t $VRANGER_ID Enter
  else
    vim --servername $VRANGER_ID --remote-send "<Esc>$1<CR>" >/dev/null 2>&1
  fi
}

# Prevent the user from inadvertently detaching and accidentally
# leaving a running tmux instance.
_send_vim ":nunmap $VRANGER_DETACH"

# Ask vim to quit
_send_vim ":qa"

# Reattach to tmux.  If there were no unsaved changes, vim and tmux should both
# exit.  Otherwise, vim gets a chance to prompt the user, and the user must
# exit the session normally.
if [ "$VRANGER_HAS_TMUX_SESSION" = "1" ]; then
  tmux -2 attach -t $VRANGER_ID >/dev/null 2>&1
fi
